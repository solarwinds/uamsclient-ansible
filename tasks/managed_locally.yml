---
# Managing local_config.yaml
- name: "Set local config template path to user-provided one or use default"
  ansible.builtin.set_fact:
    template_path: "{{ local_config_template | default('templates/template_local_config.yaml.j2') }}"

- name: Local configuration file path
  ansible.builtin.debug:
    msg: "Local configuration file path: {{ template_path }}"

- name: Create local_config.yaml file for Linux systems
  ansible.builtin.template:
    src: "{{ template_path }}"
    dest: "/opt/solarwinds/uamsclient/var/local_config.yaml"
    owner: swagent
    group: swagent
    mode: "0660"
  when: ansible_facts['system'] == "Linux"
  become: true

- name: Create local_config.yaml file for Windows systems
  ansible.builtin.template:
    src: "{{ template_path }}"
    dest: "C:\\ProgramData\\SolarWinds\\UAMSClient\\local_config.yaml"
    mode: "0660"
  when: ansible_facts['system'] == "Windows"

# Managing credentials_config.yaml
- name: "Set credentials config template path to user-provided one or use default"
  ansible.builtin.set_fact:
    credentials_template_path: "{{ credentials_config_template | default('templates/template_credentials_config.yaml.j2') }}"

- name: Credentials configuration file path
  ansible.builtin.debug:
    msg: "Credentials configuration file path: {{ credentials_template_path }}"

- name: Create credentials_config.yaml file for Linux systems
  ansible.builtin.template:
    src: "{{ credentials_template_path }}"
    dest: "/opt/solarwinds/uamsclient/var/credentials_config.yaml"
    owner: swagent
    group: swagent
    mode: "0660"
  when: ansible_facts['system'] == "Linux"
  become: true

- name: Create credentials_config.yaml file for Windows systems
  ansible.builtin.template:
    src: "{{ credentials_template_path }}"
    dest: "C:\\ProgramData\\SolarWinds\\UAMSClient\\credentials_config.yaml"
    mode: "0660"
  when: ansible_facts['system'] == "Windows"

- name: Get content of remote local config file Linux
  ansible.builtin.slurp:
    src: /opt/solarwinds/uamsclient/var/local_config.yaml
  register: remote_local_config_linux
  when: ansible_facts['system'] == "Linux"
  become: true

- name: Get content of remote local config file Windows
  ansible.builtin.slurp:
    src: "C:\\ProgramData\\SolarWinds\\UAMSClient\\local_config.yaml"
  register: remote_local_config_windows
  when: ansible_facts['system'] == "Windows"
  become: true

- name: Set unified remote_local_config for further use
  ansible.builtin.set_fact:
    remote_local_config: "{{ remote_local_config_linux if ansible_facts['system'] == 'Linux' else remote_local_config_windows }}"

- name: Interpret remote file content as yaml
  ansible.builtin.set_fact:
    remote_yaml: "{{ remote_local_config.content | b64decode | from_yaml }}"

- name: Set fact for number of integrations
  ansible.builtin.set_fact:
    number_of_integrations: "{{ remote_yaml['integrations'] | default({}) | dict2items | map(attribute='key') | list | unique | length }}"

- name: Print yaml number of integrations
  ansible.builtin.debug:
    var: number_of_integrations

- name: Wait until app responds with proper number of integrations
  ansible.builtin.uri:
    url: "http://127.0.0.1:2113/info/plugins?format=json"
    status_code: 200
  register: result
  retries: 10
  delay: 5
  until: result.json.keys() | unique | length >= number_of_integrations | int

- name: "UAMS API result"
  ansible.builtin.uri:
    url: "http://127.0.0.1:2113/info/plugins?format=json"
    method: GET
    return_content: true
    body_format: json
  register: result_uams_api

- name: Postcheck plugins
  ansible.builtin.include_tasks: check-plugin-status.yml
  vars:
    plugin: "{{ item.pl }}"
    instance: "{{ item.inst }}"
  loop: >-
    {%- set results = [] -%}
    {%- for plugin, data in result_uams_api.json.items() -%}
    {%- for instance in data -%}
    {%- set _ = results.append({
      "pl": plugin,
      "inst": instance,
    }) %}
    {%- endfor -%}
    {%- endfor -%}
    {{ results }}
  when: result_uams_api is defined
